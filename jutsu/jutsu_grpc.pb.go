// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package jutsu

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClusterClient is the client API for Cluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterClient interface {
	// Pings a node
	PingNode(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	DropAnchor(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*NinshuReply, error)
	RaiseAnchor(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*NinshuReply, error)
	ConnectTo(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*NinshuReply, error)
	GetMembers(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (Cluster_GetMembersClient, error)
}

type clusterClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterClient(cc grpc.ClientConnInterface) ClusterClient {
	return &clusterClient{cc}
}

func (c *clusterClient) PingNode(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/jutsu.Cluster/PingNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) DropAnchor(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*NinshuReply, error) {
	out := new(NinshuReply)
	err := c.cc.Invoke(ctx, "/jutsu.Cluster/DropAnchor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) RaiseAnchor(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*NinshuReply, error) {
	out := new(NinshuReply)
	err := c.cc.Invoke(ctx, "/jutsu.Cluster/RaiseAnchor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) ConnectTo(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*NinshuReply, error) {
	out := new(NinshuReply)
	err := c.cc.Invoke(ctx, "/jutsu.Cluster/ConnectTo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) GetMembers(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (Cluster_GetMembersClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cluster_ServiceDesc.Streams[0], "/jutsu.Cluster/GetMembers", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterGetMembersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cluster_GetMembersClient interface {
	Recv() (*NinshuReply, error)
	grpc.ClientStream
}

type clusterGetMembersClient struct {
	grpc.ClientStream
}

func (x *clusterGetMembersClient) Recv() (*NinshuReply, error) {
	m := new(NinshuReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClusterServer is the server API for Cluster service.
// All implementations must embed UnimplementedClusterServer
// for forward compatibility
type ClusterServer interface {
	// Pings a node
	PingNode(context.Context, *HelloRequest) (*HelloReply, error)
	DropAnchor(context.Context, *ConnectRequest) (*NinshuReply, error)
	RaiseAnchor(context.Context, *EmptyRequest) (*NinshuReply, error)
	ConnectTo(context.Context, *ConnectRequest) (*NinshuReply, error)
	GetMembers(*EmptyRequest, Cluster_GetMembersServer) error
	mustEmbedUnimplementedClusterServer()
}

// UnimplementedClusterServer must be embedded to have forward compatible implementations.
type UnimplementedClusterServer struct {
}

func (UnimplementedClusterServer) PingNode(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingNode not implemented")
}
func (UnimplementedClusterServer) DropAnchor(context.Context, *ConnectRequest) (*NinshuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropAnchor not implemented")
}
func (UnimplementedClusterServer) RaiseAnchor(context.Context, *EmptyRequest) (*NinshuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaiseAnchor not implemented")
}
func (UnimplementedClusterServer) ConnectTo(context.Context, *ConnectRequest) (*NinshuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectTo not implemented")
}
func (UnimplementedClusterServer) GetMembers(*EmptyRequest, Cluster_GetMembersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMembers not implemented")
}
func (UnimplementedClusterServer) mustEmbedUnimplementedClusterServer() {}

// UnsafeClusterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterServer will
// result in compilation errors.
type UnsafeClusterServer interface {
	mustEmbedUnimplementedClusterServer()
}

func RegisterClusterServer(s grpc.ServiceRegistrar, srv ClusterServer) {
	s.RegisterService(&Cluster_ServiceDesc, srv)
}

func _Cluster_PingNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).PingNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jutsu.Cluster/PingNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).PingNode(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_DropAnchor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).DropAnchor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jutsu.Cluster/DropAnchor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).DropAnchor(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_RaiseAnchor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).RaiseAnchor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jutsu.Cluster/RaiseAnchor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).RaiseAnchor(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_ConnectTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).ConnectTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jutsu.Cluster/ConnectTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).ConnectTo(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_GetMembers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterServer).GetMembers(m, &clusterGetMembersServer{stream})
}

type Cluster_GetMembersServer interface {
	Send(*NinshuReply) error
	grpc.ServerStream
}

type clusterGetMembersServer struct {
	grpc.ServerStream
}

func (x *clusterGetMembersServer) Send(m *NinshuReply) error {
	return x.ServerStream.SendMsg(m)
}

// Cluster_ServiceDesc is the grpc.ServiceDesc for Cluster service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cluster_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jutsu.Cluster",
	HandlerType: (*ClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingNode",
			Handler:    _Cluster_PingNode_Handler,
		},
		{
			MethodName: "DropAnchor",
			Handler:    _Cluster_DropAnchor_Handler,
		},
		{
			MethodName: "RaiseAnchor",
			Handler:    _Cluster_RaiseAnchor_Handler,
		},
		{
			MethodName: "ConnectTo",
			Handler:    _Cluster_ConnectTo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMembers",
			Handler:       _Cluster_GetMembers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "jutsu/jutsu.proto",
}
